#begin basic_03_01a
def event(self, ev, x, y, st):
    if ev.type == pygame.KEYDOWN:

        if ev.key == pygame.K_UP:
            self.y -= 1

        elif ev.key == pygame.K_RIGHT:
            self.x += 1

        elif ev.key == pygame.K_DOWN:
            self.y += 1

        elif ev.key == pygame.K_LEFT:
            self.x -= 1

    raise renpy.IgnoreEvent
#end basic_03_01a

#begin basic_03_02a
def __init__(self, background, speed, **kwargs):
    # ...
    # variables related to motion
    self.speed = speed  # <---
#end basic_03_02a

#begin basic_03_02b
def __init__(self, background, speed, **kwargs):  # <---
    # ...
    # variables related to motion
    self.speed = speed
#end basic_03_02b

#begin basic_03_02c
def event(self, ev, x, y, st):
#end basic_03_02c

#begin basic_03_02d
def __init__(self, background, speed, **kwargs):
    # ...
    # variables related to motion
    self.speed = speed
    self.old_st = None  # <---
#end basic_03_02d

#begin basic_03_02e
def __init__(self, background, speed, **kwargs):
    # ...
    # variables related to motion
    self.speed = speed
    self.old_st = None
    self.horizontal_shift, self.vertical_shift = 0, 0  # <---
#end basic_03_02e

#begin basic_03_03a
if ev.key == pygame.K_UP:
    self.y -= 1

#vvvvvvvvvvvvvvvvvvvvvvvvv

if ev.key == pygame.K_UP:
    self.vertical_shift = -1  # <---
#end basic_03_03a

#begin basic_03_03b
def event(self, ev, x, y, st):
    if ev.type == pygame.KEYDOWN:

        if ev.key == pygame.K_UP:
            self.vertical_shift = -1

        elif ev.key == pygame.K_RIGHT:
            self.horizontal_shift = 1  # <---

        elif ev.key == pygame.K_DOWN:
            self.vertical_shift = 1

        elif ev.key == pygame.K_LEFT:
            self.horizontal_shift = -1

    raise renpy.IgnoreEvent
#end basic_03_03b

#begin basic_03_03c
def event(self, ev, x, y, st):

    if ev.type == pygame.KEYDOWN:
        ...

    if ev.type == pygame.KEYUP:  # <---

        if ev.key == pygame.K_UP:
            self.vertical_shift = 0

        elif ev.key == pygame.K_RIGHT:
            self.horizontal_shift = 0

        elif ev.key == pygame.K_DOWN:
            self.vertical_shift = 0

        elif ev.key == pygame.K_LEFT:
            self.horizontal_shift = 0

    ...
#end basic_03_03c

#begin basic_03_03d
def render(self, width, height, st, at):
    # calculating new position from speed, time delta and directions
    if self.old_st is None:
        self.old_st = st
    delta = st - self.old_st # <---
    self.old_st = st
#end basic_03_03d

#begin basic_03_03e
def render(self, width, height, st, at):
    # calculating new position from speed, time delta and directions
    if self.old_st is None:
        self.old_st = st
    delta = st - self.old_st
    self.old_st = st

    self.x += self.speed * delta * self.horizontal_shift # <---
    self.y += self.speed * delta * self.vertical_shift
#end basic_03_03e

#begin basic_03_04a
def event(self, ev, x, y, st):
    keys = pygame.key.get_pressed()
#end basic_03_04a

#begin basic_03_04b
def event(self, ev, x, y, st):

    keys = pygame.key.get_pressed()
    self.horizontal_shift, self.vertical_shift = 0, 0

    if keys[pygame.K_UP]:
        self.vertical_shift -= 1

    if keys[pygame.K_RIGHT]:
        self.horizontal_shift += 1

    if keys[pygame.K_DOWN]:
        self.vertical_shift += 1

    if keys[pygame.K_LEFT]:
        self.horizontal_shift -= 1

    raise renpy.IgnoreEvent
#end basic_03_04b

#begin basic_03_04c
init python:
    import pygame

    class Example(renpy.Displayable):

        def __init__(self, background, speed, **kwargs):
            super().__init__(**kwargs)
            self.background = renpy.displayable(background)
            self.x, self.y = 0, 0

            # variables related to motion            
            self.speed = speed
            self.old_st = None
            self.horizontal_shift, self.vertical_shift = 0, 0

        def render(self, width, height, st, at):
            # calculating new position from speed, time delta and directions
            if self.old_st is None:
                self.old_st = st
            delta = st - self.old_st
            self.old_st = st
            
            self.x += self.speed * delta * self.horizontal_shift
            self.y += self.speed * delta * self.vertical_shift
            
            # rendering
            new_render = renpy.Render(width, height)
            new_render.place(self.background, self.x, self.y)
            renpy.redraw(self, 0)
            return new_render 

        def event(self, ev, x, y, st):

            keys = pygame.key.get_pressed()
            self.horizontal_shift, self.vertical_shift = 0, 0

            if keys[pygame.K_UP]:
                self.vertical_shift -= 1
            
            if keys[pygame.K_RIGHT]:
                self.horizontal_shift += 1
            
            if keys[pygame.K_DOWN]:
                self.vertical_shift += 1
            
            if keys[pygame.K_LEFT]:
                self.horizontal_shift -= 1

            raise renpy.IgnoreEvent

screen test_screen():
    default game = Example(background='eileen happy', speed=200)
    add game

label start:
    call screen test_screen()
    return
#end basic_03_04c
