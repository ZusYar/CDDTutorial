#begin intermediate_03_01a
class Example(renpy.Displayable):
    def __init__(self, left, right, **kwargs):
        super().__init__(**kwargs)
        self.left = renpy.displayable(left)
        self.right = renpy.displayable(right)
        self.x, self.y = 0, 0

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        left = renpy.render(self.left, width, height, st, at)
        right = renpy.render(self.right, width, height, st, at)

        rv.blit(left, (0, 0))
        rv.blit(right, (0, 0))
        return rv 

    def event(self, ev, x, y, st):
        self.x, self.y = x, y
        renpy.redraw(self, 0)
        raise renpy.IgnoreEvent
#end intermediate_03_01a

#begin intermediate_03_01b
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        left = renpy.render(self.left, width, height, st, at)
        right = renpy.render(self.right, width, height, st, at)

        rv.mesh = True
        rv.add_shader("renpy.dissolve")

        rv.blit(left, (0, 0))
        rv.blit(right, (0, 0))
        return rv 

    ...
#end intermediate_03_01b

#begin intermediate_03_01c
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        left = renpy.render(self.left, width, height, st, at)
        right = renpy.render(self.right, width, height, st, at)

        rv.mesh = True
        rv.add_shader("renpy.dissolve")
        rv.add_uniform("u_renpy_dissolve", ?)  # <---

        rv.blit(left, (0, 0))
        rv.blit(right, (0, 0))
        return rv 

    ...
#end intermediate_03_01c

#begin intermediate_03_01d
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        left = renpy.render(self.left, width, height, st, at)
        right = renpy.render(self.right, width, height, st, at)

        w, h = left.get_size()

        rv.mesh = True
        rv.add_shader("renpy.dissolve")
        rv.add_uniform("u_renpy_dissolve", clamp(self.x / w))

        rv.blit(left, (0, 0))
        rv.blit(right, (0, 0))
        return rv 

    ...

def clamp(a, b=0, c=1):
    return sorted((a, b, c))[1]
#end intermediate_03_01d

#begin intermediate_03_02a
class Example(renpy.Displayable):
    def __init__(self, widget, steps, **kwargs):
        super().__init__(**kwargs)
        self.widget = renpy.displayable(widget)
        self.steps = steps
        self.x, self.y = 0, 0

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        widget = renpy.render(self.widget, width, height, st, at)

        rv.blit(widget, (0, 0))
        return rv 

    def event(self, ev, x, y, st):
        self.x, self.y = x, y
        renpy.redraw(self, 0)
        raise renpy.IgnoreEvent
#end intermediate_03_02a

#begin intermediate_03_02b
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        widget = renpy.render(self.widget, width, height, st, at)

        rv.mesh = True
        rv.add_shader("renpy.texture")
        rv.add_uniform("u_lod_bias", ?) # <--

        rv.blit(widget, (0, 0))
        return rv 

    ...
#end intermediate_03_02b

#begin intermediate_03_02c
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        widget = renpy.render(self.widget, width, height, st, at)

        w, h = widget.get_size()
        quantum = w / (self.steps)
        step = clamp(self.x / quantum, 0, self.steps)

        rv.mesh = True
        rv.add_shader("renpy.texture")
        rv.add_uniform("u_lod_bias", step)

        rv.blit(widget, (0, 0))
        return rv 

    ...
#end intermediate_03_02c

#begin intermediate_03_02d
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        widget = renpy.render(self.widget, width, height, st, at)

        w, h = widget.get_size()
        quantum = w / (self.steps)
        step = clamp(self.x / quantum, 0, self.steps)

        rv.mesh = True
        rv.add_shader("renpy.texture")
        rv.add_uniform("u_lod_bias", step)

        rv.add_property("texture_scaling", "nearest_mipmap_nearest") # <---

        rv.blit(widget, (0, 0))
        return rv 

    ...
#end intermediate_03_02d

#begin intermediate_03_03a
init python hide:
    renpy.register_shader("shader.distort"
    , variables="""
        uniform float u_lod_bias;
        uniform sampler2D tex0;
        uniform float u_time;
        uniform float u_distort;
        varying vec2 v_tex_coord;

    """, fragment_300="""
        const float pi = 3.1415926;
        vec2 coord = v_tex_coord.st;

        float factor = sin(u_time * pi) * u_distort;
        coord.x += factor * cos(pi * coord.y);

        vec4 color0 = texture2D(tex0, coord, u_lod_bias);
        gl_FragColor = color0;
    """)
#end intermediate_03_03a

#begin intermediate_03_03b
class Example(renpy.Displayable):
    def __init__(self, widget, **kwargs):
        super().__init__(**kwargs)
        self.widget = renpy.displayable(widget)

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        widget = renpy.render(self.widget, width, height, st, at)

        rv.blit(widget, (0, 0))

        rv.add_shader("shader.distort")
        rv.add_uniform("u_distort", 0.02)

        renpy.redraw(self, 0)
        return rv 
#end intermediate_03_03b

#begin intermediate_03_04a
class Example(renpy.Displayable):
    def __init__(self, left, right, pixellation_level, distortion, **kwargs):
        super().__init__(**kwargs)
        self.left = renpy.displayable(left)
        self.right = renpy.displayable(right)
        self.pixellation_level = pixellation_level
        self.distortion = distortion
        self.x, self.y = 0, 0

    def event(self, ev, x, y, st):
        self.x, self.y = x, y
        raise renpy.IgnoreEvent

    def render(self, width, height, st, at):
        rv = renpy.Render(width, height)
        left = renpy.render(self.left, width, height, st, at)
        right = renpy.render(self.right, width, height, st, at)
        w, h = left.get_size()

        # dissolving
        rv.mesh = True
        rv.add_shader("renpy.dissolve")
        rv.add_uniform("u_renpy_dissolve", clamp(self.x / w)) 

        # adding pixellation shader
        rv.add_shader("renpy.texture")
        rv.add_uniform("u_lod_bias", self.pixellation_level)
        rv.add_property("texture_scaling", "nearest_mipmap_nearest")

        # adding our custom shader
        rv.add_shader("shader.distort")
        rv.add_uniform("u_distort", self.distortion)

        rv.blit(left, (0, 0))
        rv.blit(right, (0, 0))
        renpy.redraw(self, 0)
        return rv 
#end intermediate_03_04a

#begin intermediate_03_04b
    """, fragment_200="""
        ...
        vec4 color0 = texture2D(tex0, v_tex_coord.st, u_lod_bias);
        vec4 color1 = texture2D(tex1, v_tex_coord.st, u_lod_bias);
        gl_FragColor = mix(color0, color1, u_renpy_dissolve);
    
    """, fragment_300="""
        ...
        vec4 color0 = texture2D(tex0, coord, u_lod_bias);
        gl_FragColor = color0;
#end intermediate_03_04b

#begin intermediate_03_04c
    renpy.register_shader("shader.distort_mod"
    , variables="""
        uniform float u_distort;
        uniform float u_time;

    """, fragment_300="""
        const float pi = 3.1415926;
        vec2 coord = v_tex_coord.st;

        float factor = sin(u_time * pi) * u_distort;
        coord.x += factor * cos(pi * coord.y);

        color0 = texture2D(tex0, coord, u_lod_bias);
        gl_FragColor = color0;
    """)
#end intermediate_03_04c

#begin intermediate_03_04d
class Example(renpy.Displayable):
    ...

    def render(self, width, height, st, at):
        ...

        # dissolving
        rv.mesh = True
        rv.add_shader("renpy.dissolve")
        rv.add_uniform("u_renpy_dissolve", clamp(self.x / w)) 

        # applying lod and texture_scaling
        rv.add_uniform("u_lod_bias", self.pixellation_level)
        rv.add_property("texture_scaling", "nearest_mipmap_nearest")

        # adding our custom shader
        rv.add_shader("shader.distort_mod")
        rv.add_uniform("u_distort", self.distortion)

        ...
        return rv 
#end intermediate_03_04d

#begin intermediate_03_05a
fragment renpy.dissolve, renpy.geometry, shader.distort_mod --------------------
#version 120
uniform float u_distort;
uniform float u_lod_bias;
uniform float u_renpy_dissolve;
uniform float u_time;
uniform sampler2D tex0;
uniform sampler2D tex1;
varying vec2 v_tex_coord;

void main() {
        # <--- dissolve part, priority 200
        vec4 color0 = texture2D(tex0, v_tex_coord.st, u_lod_bias);
        vec4 color1 = texture2D(tex1, v_tex_coord.st, u_lod_bias);

        gl_FragColor = mix(color0, color1, u_renpy_dissolve);
    
        # <--- distort_mod part, priority 300
        const float pi = 3.1415926;
        vec2 coord = v_tex_coord.st;

        float factor = sin(u_time * pi) * u_distort;
        coord.x += factor * cos(pi * coord.y);

        color0 = texture2D(tex0, coord, u_lod_bias);
        gl_FragColor = color0;
    }
#end intermediate_03_05a

#begin intermediate_03_05b
renpy.register_shader("shader.wiggle"
, variables="""
    uniform float u_distort;
    uniform float u_time;

""", fragment_300="""
    const float pi = 3.1415926;
    vec2 coord = v_tex_coord.st;

    if (coord.y > 0.5) {
        float factor = sin(u_time * pi) * u_distort;
        coord.x += factor * cos(pi * coord.y);

        gl_FragColor = texture2D(tex0, coord, u_lod_bias);
    }
""")
#end intermediate_03_05b

#begin intermediate_03_06a
Example(
    widget = "eileen vhappy",
    background = Solid("#d8ddc1"),
    foreground = "fog",
    distance = 80)
#end intermediate_03_06a

#begin intermediate_03_06b
def __init__(self, widget, background, foreground, distance, **kwargs):
    super().__init__(**kwargs)

    self.foreground = renpy.displayable(foreground)
    self.distance = distance
    self.x, self.y = 0, 0
#end intermediate_03_06b

#begin intermediate_03_06c
def __init__(self, widget, background, foreground, distance, **kwargs):
    super().__init__(**kwargs)

    # randomizing position
    w, h = config.screen_width, config.screen_height
    x, y = (random.randint(50, t) for t in (w - 100, h - 200))
    z = random.uniform(0.5, 0.9)

    self.foreground = renpy.displayable(foreground)
    self.distance = distance
    self.x, self.y = 0, 0
#end intermediate_03_06c

#begin intermediate_03_06d
def __init__(self, widget, background, foreground, distance, **kwargs):
    super().__init__(**kwargs)

    # randomizing position
    w, h = config.screen_width, config.screen_height
    x, y = (random.randint(50, t) for t in (w - 100, h - 200))
    z = random.uniform(0.5, 0.9)

    self.base = Composite((w, h),
        (0, 0), renpy.displayable(background),
        (x, y), Transform(renpy.displayable(widget), zoom=z))
    self.foreground = renpy.displayable(foreground)
    self.distance = distance
    self.x, self.y = 0, 0
#end intermediate_03_06d

#begin intermediate_03_06e
def event(self, ev, x, y, st):
    if x > 0 and y > 0:
        self.x, self.y = x, y
        renpy.redraw(self, 0)
    raise renpy.IgnoreEvent
#end intermediate_03_06e

#begin intermediate_03_06f
def render(self, width, height, st, at):
    rv = renpy.Render(width, height)
    rv.place(self.base, 0, 0)
    rv.place(self.foreground, 0, 0)

    rv.mesh = True
    rv.add_shader("shader.flashlight")
    rv.add_uniform("u_pos", (self.x, self.y))
    rv.add_uniform("u_distance", self.distance)

    return rv 
#end intermediate_03_06f

#begin intermediate_03_06g
renpy.register_shader("shader.flashlight"
, variables="""
    uniform float u_lod_bias;
    uniform sampler2D tex0;
    uniform sampler2D tex1;
    uniform vec2 u_pos;
    uniform float u_distance;
    varying vec2 v_tex_coord;
    attribute vec2 a_tex_coord;
    uniform vec2 u_model_size;

""", vertex_300=""" 
    v_tex_coord = a_tex_coord;

""", fragment_300="""
    vec2 coord = v_tex_coord.st;
    vec2 cur = coord * u_model_size;

    float d = distance(u_pos, cur);
    float visibility_factor = smoothstep(u_distance / 2, u_distance, d);

    vec4 color0 = texture2D(tex0, coord, u_lod_bias);
    vec4 color1 = texture2D(tex1, coord, u_lod_bias);
    gl_FragColor = mix(color0, color1, visibility_factor);
""")
#end intermediate_03_06g

#begin intermediate_03_06h
    ...
    float base_lod = int(visibility_factor * 4);
    vec4 color0 = texture2D(tex0, coord, base_lod);
    ...
#end intermediate_03_06h
