#begin basic_02_01a
def event(self, ev, x, y, st):
    pass
#end basic_02_01a

#begin basic_02_01b
def event(self, ev, x, y, st):
    raise renpy.IgnoreEvent # <---
#end basic_02_01b

#begin basic_02_01c
def event(self, ev, x, y, st):
    if ev.type == pygame.KEYDOWN: # <---
        pass
    raise renpy.IgnoreEvent
#end basic_02_01c

#begin basic_02_01d
import pygame # <--- somewhere under init python block

def event(self, ev, x, y, st):
    if ev.type == pygame.KEYDOWN:
        pass
    raise renpy.IgnoreEvent
#end basic_02_01d

#begin basic_02_01e
import pygame

def event(self, ev, x, y, st):
    if ev.type == pygame.KEYDOWN:
        if ev.key in (pygame.K_UP, pygame.K_RIGHT, pygame.K_DOWN, pygame.K_LEFT): # <--- one of the arrow keys pressed
            pass
    raise renpy.IgnoreEvent
#end basic_02_01e

#begin basic_02_01f
def event(self, ev, x, y, st): # <---
    pass
#end basic_02_01f

#begin basic_02_02a
def __init__(self, background, **kwargs):
    super().__init__(**kwargs)
    self.background = renpy.displayable(background)
    self.x, self.y = 0, 0 # <---
#end basic_02_02a

#begin basic_02_02b
def render(self, width, height, st, at):
    new_render = renpy.Render(width, height)
    new_render.place(self.background, self.x, self.y) # <---
    return new_render 
#end basic_02_02b

#begin basic_02_02c
def event(self, ev, x, y, st):
    self.x, self.y = x, y # <---
    raise renpy.IgnoreEvent
#end basic_02_02c

#begin basic_02_03a
import pygame

class Example(renpy.Displayable):

    def __init__(self, background, **kwargs):
        super().__init__(**kwargs)
        self.background = renpy.displayable(background)
        self.x, self.y = 0, 0

    def render(self, width, height, st, at):
        new_render = renpy.Render(width, height)
        new_render.place(self.background, self.x, self.y)
        renpy.redraw(self, 0)
        return new_render 

    def event(self, ev, x, y, st):
        self.x, self.y = x, y
        raise renpy.IgnoreEvent
#end basic_02_03a

#begin basic_02_04a
renpy.redraw(d, when)
#end basic_02_04a

#begin basic_02_04b
renpy.redraw(self, 0)
#end basic_02_04b

#begin basic_02_04c
def render(self, width, height, st, at):
    new_render = renpy.Render(width, height)
    new_render.place(self.background, self.x, self.y)
    renpy.redraw(self, 0) # <---
    return new_render 
#end basic_02_04c

#begin basic_02_05a
import pygame

class Example(renpy.Displayable):
    def __init__(self, background, **kwargs):
        super().__init__(**kwargs)
        self.background = renpy.displayable(background)
        self.x, self.y = 0, 0

    def render(self, width, height, st, at):
        new_render = renpy.Render(width, height)
        new_render.place(self.background, self.x, self.y)
        renpy.redraw(self, 0)
        return new_render 

    def event(self, ev, x, y, st):
        self.x, self.y = x, y
        raise renpy.IgnoreEvent
#end basic_02_05a

#begin basic_02_06a
def event(self, ev, x, y, st):
    self.update_position(x, y) # <---
    raise renpy.IgnoreEvent

def update_position(self, x, y):
    if x >= 0 and y >= 0:
        self.x, self.y = x, y
#end basic_02_06a

#begin basic_02_06b
def event(self, ev, x, y, st):
    if ev.type == pygame.MOUSEBUTTONUP: # <---
        self.update_position(x, y)
    raise renpy.IgnoreEvent
#end basic_02_06b

#begin basic_02_06c
def event(self, ev, x, y, st):
    if ev.type == pygame.MOUSEBUTTONUP:
        if ev.button in (1, 3): # <---
            self.update_position(x, y)
    raise renpy.IgnoreEvent
#end basic_02_06c

#begin basic_02_07a
import pygame

class Example(renpy.Displayable):
    def __init__(self, background, **kwargs):
        super().__init__(**kwargs)
        self.background = renpy.displayable(background)
        self.x, self.y = 0, 0

    def render(self, width, height, st, at):
        new_render = renpy.Render(width, height)
        child_render = renpy.render(self.background, width, height, st, at)
        new_render.blit(child_render, self.pos)
        renpy.redraw(self, 0)
        return new_render 

    def event(self, ev, x, y, st):
        if ev.type == pygame.MOUSEBUTTONUP:
            if ev.button in (1, 3):
                self.update_position(x, y)
        raise renpy.IgnoreEvent

    def update_position(self, x, y):
        if x >= 0 and y >= 0:
            self.x, self.y = x, y
#end basic_02_07a

#begin basic_02_07b
import pygame

class Example(renpy.Displayable):
    def __init__(self, background, **kwargs):
        super().__init__(**kwargs)
        self.background = renpy.displayable(background)
        self.x, self.y = 0, 0

    def render(self, width, height, st, at):
        new_render = renpy.Render(width, height)
        child_render = renpy.render(self.background, width, height, st, at)
        new_render.blit(child_render, self.pos)
        return new_render 

    def event(self, ev, x, y, st):
        if ev.type == pygame.MOUSEBUTTONUP:
            if ev.button in (1, 3):
                self.update_position(x, y)
        raise renpy.IgnoreEvent

    def update_position(self, x, y):
        if x >= 0 and y >= 0:
            self.x, self.y = x, y
            renpy.redraw(self, 0) # <---
#end basic_02_07b